{"version":3,"sources":["App.js","index.js"],"names":["Omou","data","localStorageCallback","value","console","log","useState","thoughts","setThoughts","thought","setThought","thoughtInTheMaking","setThoughtInTheMaking","useEffect","addThought","trim","length","createdAt","Date","now","lastSeen","toaster","notify","Pane","className","width","height","backgroundColor","defaultTheme","scales","neutral","N10","display","alignItems","flexDirection","marginY","Heading","size","color","palette","lightest","marginBottom","textAlign","wordWrap","overflow","justifyContent","IconButton","onClick","sortedThoughts","sort","a","b","oldest","newest","icon","Textarea","placeholder","onChange","event","text","target","onKeyUp","key","padding","Text","App","type","storage","window","x","setItem","removeItem","e","DOMException","code","name","storageAvailable","JSON","parse","localStorage","getItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7edb358c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Pane,\n  defaultTheme,\n  Textarea,\n  IconButton,\n  Heading,\n  toaster,\n  Text,\n} from 'evergreen-ui';\n\nconst storageAvailable = (type) => {\n  var storage;\n  try {\n    storage = window[type];\n    var x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e instanceof DOMException &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n};\n\nfunction App() {\n  if (storageAvailable('localStorage')) {\n    const debug = false;\n    if (debug) {\n      localStorage.clear();\n    }\n\n    const now = Date.now();\n    const storageID = 'thoughts';\n    const data = JSON.parse(localStorage.getItem(storageID)) || [\n      {\n        thought: 'I’m too drunk to taste this chicken.',\n        createdAt: now,\n        lastSeen: now,\n      },\n    ];\n\n    return (\n      <Omou\n        data={data}\n        localStorageCallback={(thoughts) => {\n          localStorage.setItem(storageID, JSON.stringify(thoughts));\n        }}\n      />\n    );\n  } else {\n    const data = [\n      {\n        thought:\n          'People say nothing is impossible, but I do nothing every day.',\n        createdAt: 1594233153181,\n        lastSeen: 1594233153181,\n      },\n      {\n        thought:\n          'Nobody realizes that some people expend tremendous energy merely to be normal.',\n        createdAt: 1594233235733,\n        lastSeen: 1594233235733,\n      },\n      {\n        thought: 'I’m too drunk to taste this chicken.',\n        createdAt: 1594233241368,\n        lastSeen: 1594233241368,\n      },\n      {\n        thought:\n          'My opinions may have changed, but not the fact that I’m right.',\n        createdAt: 1594233246323,\n        lastSeen: 1594233246323,\n      },\n    ];\n    return <Omou data={data} />;\n  }\n}\n\nconst Omou = ({\n  data,\n  localStorageCallback = (value) => {\n    console.log(value);\n  },\n}) => {\n  const [thoughts, setThoughts] = useState(data);\n  const [thought, setThought] = useState(data[0].thought);\n  const [thoughtInTheMaking, setThoughtInTheMaking] = useState('');\n\n  useEffect(() => {\n    localStorageCallback(thoughts);\n  }, [thoughts, localStorageCallback]);\n\n  const updateThought = () => {\n    if (thoughts.length < 1) {\n      // nothing to update\n    } else if (thoughts.length < 1) {\n      setThought(thoughts[0].thought);\n    } else {\n      const sortedThoughts = thoughts.sort((a, b) => b.lastSeen - a.lastSeen);\n      const oldest = sortedThoughts[thoughts.length - 1];\n      const newest = sortedThoughts[0];\n      oldest.lastSeen = Date.now();\n      setThought(newest.thought);\n    }\n  };\n\n  const addThought = () => {\n    if (thoughtInTheMaking.trim().length > 0) {\n      setThoughts([\n        ...thoughts,\n        {\n          thought: thoughtInTheMaking.trim(),\n          createdAt: Date.now(),\n          lastSeen: Date.now(),\n        },\n      ]);\n    } else {\n      toaster.notify('Did you even write something?');\n    }\n    setThoughtInTheMaking('');\n  };\n\n  return (\n    <Pane\n      className=\"App\"\n      width=\"100%\"\n      height=\"100%\"\n      backgroundColor={defaultTheme.scales.neutral.N10}\n      display=\"flex\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n    >\n      <Pane\n        width=\"80vw\"\n        height=\"100%\"\n        display=\"flex\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n      >\n        <Pane marginY={120} width=\"80%\">\n          <Heading\n            size={900}\n            color={defaultTheme.palette.neutral.lightest}\n            marginBottom={64}\n            textAlign=\"center\"\n            wordWrap=\"break-word\"\n            height={120}\n            overflow=\"auto\"\n          >\n            {thought}\n          </Heading>\n          <Pane\n            width=\"100%\"\n            display=\"flex\"\n            alignItems=\"flex-end\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n          >\n            <IconButton onClick={updateThought} icon=\"reset\">\n              Keep that thought\n            </IconButton>\n          </Pane>\n        </Pane>\n        <Pane width=\"80%\">\n          <Textarea\n            placeholder=\"What do you think?\"\n            value={thoughtInTheMaking}\n            onChange={(event) => {\n              const text = event.target.value;\n              if (text.length > 140) {\n                toaster.notify('Keep your thoughts short!');\n              } else {\n                setThoughtInTheMaking(text);\n              }\n            }}\n            onKeyUp={(event) => {\n              if (event.key === 'Enter') {\n                addThought();\n              }\n            }}\n            padding={24}\n          ></Textarea>\n          <Pane\n            width=\"100%\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            flexDirection=\"row\"\n          >\n            <Text color={defaultTheme.palette.neutral.lightest}>\n              Characters left: {140 - thoughtInTheMaking.length}\n            </Text>\n            <IconButton onClick={addThought} icon=\"lock\">\n              Keep that thought\n            </IconButton>\n          </Pane>\n        </Pane>\n      </Pane>\n    </Pane>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}